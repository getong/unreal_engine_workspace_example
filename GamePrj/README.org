* GamePrj

copy from [[https://sproll.cn/2023/07/13/3d/01_ue_indoor/][Unreal engine C++开发从路人到入门（一）hello world]]

** code explain

#+begin_quote
介绍一下本次练手的内容：我们将创建一个工程，将viewport中的基础类对象打印出来。viewport是指UE编辑器中的Level Viewport窗口。这是编辑level及其中actor的主要窗口之一。

这个示例将要使用了几个基础类：

UEngine：它是引擎类，在All classes页面搜索这个类，可以找到它的文档页面链接（每个类都可以在这个页面搜索到它的API文档）。如其名，它完成引擎方面的工作。在本示例中，用该类的全局变量GEngine来获取其下管理的所有UWorld对象。

UWorld：它是描述“游戏世界”的类。每个UWorld对象都有一个类型成员，通过该成员区别这个world是在编辑器中正在处于编辑状态的世界（Editor类型），还是编辑器中模拟运行的游戏世界（Play in Engine, PIE类型），或者独立EXE运行的游戏世界。UWorld类也有一个全局对象GWorld。

ULevel：它是关卡对象。每个UWorld都管理着一个或者多个ULevel对象。

AActor：所有可以放置在关卡中的对象都是AActor实例。比如说玩家对象，花草树木，高山大海……等等。

UActorComponent：这个类用于对actor进行各种属性拓展，使之可以表达各种三维物体。举例来说，如果给一个球体添加一个光源组件（light component），便可以令其发光，使其表现得像一个灯泡或者太阳。

以上这些就是UE非常基础且核心的五个类，它们的关系是：UEngine类管理着若干个UWorld，UWorld类若干个ULevel，ULevel类若干个AActor，AActor类若干个UActorComponent。在本次示例中，我们将默认创建的工程的以上类的实例的名称打印出来。



代码将GEngine这个全局对象下所管理的所有World、Level、Actor等对象全部遍历一遍。每遍历到一个对象，就打印出它的name。

由于这些对象都是继承自UObject，所以共有一个GetName()方法。

UE_LOG函数是日志打印函数，以后会经常用到，后续会详细说明。

建议根据UWorld/ULevel/UActor的API文档，将其更多信息打印出来，作为学习。

AGamePrjCharacter::BeginPlay()函数在游戏启动时由UE框架调用，意为一个游戏player开始游戏。
#+end_quote

** component code


#+begin_quote
上述代码重载了ACharacter::OnJumped_Implementation()函数，该函数在角色跳跃的时候被调用。

代码实现的功能：角色跳跃后，将角色的Z轴坐标增加100个单位，于是角色就跳跃到更高的位置。

角色的位置（三维世界的坐标）是被USceneComponent类型的component控制。USceneComponent是一种非常重要且常用的component类型。

代码中首先通过AActor::GetComponentByClass()方法，获取component对象指针。然后使用Cast语句将该指针转化为其子类USceneComponent的指针。Cast语句类似于c++语法中的dynamic_cast。

代码中还出现USceneComponent::StaticClass()这个奇怪的语句。它是获取USceneComponent的UClass对象的意思。本章暂不解释，下一章即对UClass的使用作详细说明。

然后如果转换成功，则用USceneComponent::GetComponentLocation()取出角色的坐标。最后将坐标的Z轴添加100单位，再重设回去。

这里可以看到，AActor的坐标属性控制在USceneComponent类型的component中。这就是UE系统运作的基本逻辑之一，它通过各种各样添加到AActor上的component，来实现对AActor的表现或者行为的控制。在“细节”窗口（通过点击菜单“窗口->细节”来打开），点击“+添加”按钮，可以为当前选择的actor添加各种component。

最后运行一下，当开始游戏后，点击空格键，角色跳跃到了一个更高的空中平台。不过效果挺怪的，角色踩在空中掉不下来，而且视角也没有跟随角色移动，只要角色多跳几次，那就移动到屏幕外面。这是因为没有更新其它相关对象(如摄像机组件等)的原因。但本示例不再对比细化说明。
#+end_quote